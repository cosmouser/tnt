package tnt

import (
	"encoding/binary"
	"image"
	"image/color"
	"io"

	"github.com/fogleman/gg"
)

const (
	minimapVoidByte  = 0x64
	maxMinimapWidth  = 252
	maxMinimapHeight = 252
	animNameLength   = 128
	// DataSize is the number of pixels per data unit
	DataSize     = 16
	tileDataSize = 32 * 32
	tileHeight   = 32
	tileWidth    = 32
)

// Object is the top level item that contains the minimap and the header
type Object struct {
	Header Header
	Bitmap Bitmap
}

// Bitmap is an image
type Bitmap struct {
	Width, Height int
	Data          []byte
	Palette       color.Palette
}

// Header holds tnt header info
type Header struct {
	Version      uint32
	Width        uint32
	Height       uint32
	PtrMapData   uint32
	PtrMapAttr   uint32
	PtrTileGfx   uint32
	Tiles        uint32
	TileAnims    uint32
	PtrTileAnims uint32
	SeaLevel     uint32
	PtrMiniMap   uint32
	_            uint32 // Unknown
	_            uint32 // Pad1
	_            uint32 // Pad2
	_            uint32 // Pad3
	_            uint32 // Pad4
}

// ParseMap creates a full size render of a map
func ParseMap(r io.ReadSeeker) (*image.Image, error) {
	header, err := ReadHeader(r)
	if err != nil {
		return nil, err
	}
	tiles, err := EnumerateTiles(r, header)
	if err != nil {
		return nil, err
	}
	data, err := EnumerateData(r, header)
	if err != nil {
		return nil, err
	}
	return DrawMap(tiles, data, header)
}

// ScaleMapImage scales an image down to a maximum dimension value
func ScaleMapImage(mappic image.Image, maxDimension float64) (image.Image, error) {
	imgRect := mappic.Bounds()
	var scale float64
	if imgRect.Max.X > imgRect.Max.Y {
		scale = maxDimension / float64(imgRect.Max.X)
	} else {
		scale = maxDimension / float64(imgRect.Max.Y)
	}

	dc := gg.NewContext(int(scale*float64(imgRect.Max.X)), int(scale*float64(imgRect.Max.Y)))
	dc.Scale(scale, scale)
	dc.DrawImageAnchored(mappic, 0, 0, 0.0, 0.0)
	return dc.Image(), nil
}

// EnumerateTiles returns a slice of tile bytes.
// Tiles are 32x32px. Each byte is a color and index is its position.
func EnumerateTiles(r io.ReadSeeker, header Header) ([]Bitmap, error) {
	bitmaps := make([]Bitmap, int(header.Tiles))
	// Seek to the tiles section of the file
	if n, err := r.Seek(int64(header.PtrTileGfx), 0); n != int64(header.PtrTileGfx) || err != nil {
		return nil, err
	}
	for i := range bitmaps {
		tileData := make([]byte, tileDataSize)
		if n, err := r.Read(tileData); n != len(tileData) || err != nil {
			return nil, err
		}
		bitmaps[i] = Bitmap{
			Width:   tileWidth,
			Height:  tileHeight,
			Data:    tileData,
			Palette: TAPalette,
		}
	}
	return bitmaps, nil
}

// ReadHeader returns a Header for a TNT file
func ReadHeader(r io.ReadSeeker) (Header, error) {
	header := Header{}
	err := binary.Read(r, binary.LittleEndian, &header)
	return header, err
}

// EnumerateData returns a slice of mapdata bytes
func EnumerateData(r io.ReadSeeker, header Header) ([]uint16, error) {
	// Seek to the data section of the file
	if n, err := r.Seek(int64(header.PtrMapData), 0); n != int64(header.PtrMapData) || err != nil {
		return nil, err
	}
	out := make([]uint16, 0, int((header.Width/2)*(header.Height/2)))
	ubuf := make([]byte, 2)
	for i := 0; i < cap(out); i++ {
		if n, err := r.Read(ubuf); n != len(ubuf) || err != nil {
			return nil, err
		}
		out = append(out, binary.LittleEndian.Uint16(ubuf))
	}
	return out, nil
}

// DrawMap takes each of the tiles from the tnt file and makes a full size png
func DrawMap(tiles []Bitmap, data []uint16, header Header) (*image.Image, error) {
	dc := gg.NewContext(int(header.Width*16), int(header.Height*16))
	index := 0
	for y := 0; y < int(header.Height/2); y++ {
		for x := 0; x < int(header.Width/2); x++ {
			bm, err := tiles[data[index]].Deserialize()
			if err != nil {
				return nil, err
			}
			dc.DrawImage(bm, x*32, y*32)
			index++
		}
	}
	img := dc.Image()
	return &img, nil
}

// Parse returns an Object from a tnt file
func Parse(r io.ReadSeeker) (result Object, err error) {
	header := Header{}
	err = binary.Read(r, binary.LittleEndian, &header)
	if err != nil {
		return
	}
	// Seek to the minimap section of the file
	if n, err := r.Seek(int64(header.PtrMiniMap), 0); n != int64(header.PtrMiniMap) || err != nil {
		return result, err
	}
	int32buf := make([]byte, 4)
	if _, err = r.Read(int32buf); err != nil {
		return
	}
	mmwidth := int(binary.LittleEndian.Uint32(int32buf))
	if _, err = r.Read(int32buf); err != nil {
		return
	}
	mmheight := int(binary.LittleEndian.Uint32(int32buf))
	data := make([]byte, mmwidth*mmheight)
	if _, err = r.Read(data); err != nil {
		return
	}
	realWidth, realHeight := getMinimapActualSize(data, mmwidth, mmheight)
	minimapdata := trimMinimapBytes(data, mmwidth, mmheight, realWidth, realHeight)
	result.Bitmap = Bitmap{
		Width:   realWidth,
		Height:  realHeight,
		Data:    minimapdata,
		Palette: TAPalette,
	}
	result.Header = header
	return result, nil
}
func getMinimapActualSize(data []byte, wv, hv int) (width, height int) {
	for i := wv - 1; i >= 0; i-- {
		if data[i] != minimapVoidByte {
			width = i + 1
			break
		}
	}
	for i := hv - 1; i >= 0; i-- {
		if data[i*wv] != minimapVoidByte {
			height = i + 1
			break
		}
	}
	return width, height
}
func trimMinimapBytes(data []byte, wv, hv, width, height int) []byte {
	newData := make([]byte, width*height)
	for y := 0; y < height; y++ {
		for x := 0; x < width; x++ {
			newData[(y*width)+x] = data[(y*wv)+x]
		}
	}
	return newData
}

// TAPalette is the TA engine's color palette
var TAPalette = []color.Color{
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0xff, 0xeb, 0xf3, 0xff},
	color.RGBA{0xeb, 0xc7, 0xd3, 0xff},
	color.RGBA{0xd7, 0xa3, 0xb3, 0xff},
	color.RGBA{0xc3, 0x87, 0x97, 0xff},
	color.RGBA{0xaf, 0x6f, 0x7f, 0xff},
	color.RGBA{0x9b, 0x5b, 0x63, 0xff},
	color.RGBA{0x8b, 0x47, 0x4f, 0xff},
	color.RGBA{0x7b, 0x3b, 0x47, 0xff},
	color.RGBA{0x6f, 0x33, 0x3b, 0xff},
	color.RGBA{0x63, 0x2b, 0x33, 0xff},
	color.RGBA{0x57, 0x23, 0x2b, 0xff},
	color.RGBA{0x4b, 0x1b, 0x27, 0xff},
	color.RGBA{0x3b, 0x17, 0x1f, 0xff},
	color.RGBA{0x2f, 0x0f, 0x17, 0xff},
	color.RGBA{0x23, 0x0b, 0x0f, 0xff},
	color.RGBA{0x17, 0x07, 0x0b, 0xff},
	color.RGBA{0x73, 0xff, 0xdf, 0xff},
	color.RGBA{0x57, 0xe7, 0xbf, 0xff},
	color.RGBA{0x43, 0xcf, 0x9f, 0xff},
	color.RGBA{0x2f, 0xb7, 0x83, 0xff},
	color.RGBA{0x1f, 0x9f, 0x67, 0xff},
	color.RGBA{0x13, 0x8b, 0x4f, 0xff},
	color.RGBA{0x0f, 0x77, 0x3f, 0xff},
	color.RGBA{0x0b, 0x6b, 0x37, 0xff},
	color.RGBA{0x07, 0x5f, 0x2f, 0xff},
	color.RGBA{0x07, 0x53, 0x2b, 0xff},
	color.RGBA{0x00, 0x47, 0x27, 0xff},
	color.RGBA{0x00, 0x3f, 0x23, 0xff},
	color.RGBA{0x00, 0x33, 0x1b, 0xff},
	color.RGBA{0x00, 0x27, 0x17, 0xff},
	color.RGBA{0x00, 0x1b, 0x0f, 0xff},
	color.RGBA{0x00, 0x13, 0x0b, 0xff},
	color.RGBA{0xe3, 0xef, 0xff, 0xff},
	color.RGBA{0xc7, 0xdf, 0xe7, 0xff},
	color.RGBA{0xaf, 0xcf, 0xcb, 0xff},
	color.RGBA{0x93, 0xb7, 0xa7, 0xff},
	color.RGBA{0x7f, 0x9f, 0x83, 0xff},
	color.RGBA{0x6b, 0x87, 0x67, 0xff},
	color.RGBA{0x5f, 0x6f, 0x53, 0xff},
	color.RGBA{0x5f, 0x63, 0x47, 0xff},
	color.RGBA{0x5b, 0x57, 0x3b, 0xff},
	color.RGBA{0x53, 0x43, 0x33, 0xff},
	color.RGBA{0x47, 0x3b, 0x2b, 0xff},
	color.RGBA{0x3b, 0x33, 0x23, 0xff},
	color.RGBA{0x2f, 0x2b, 0x1b, 0xff},
	color.RGBA{0x23, 0x1f, 0x13, 0xff},
	color.RGBA{0x17, 0x13, 0x0f, 0xff},
	color.RGBA{0x0b, 0x0b, 0x07, 0xff},
	color.RGBA{0xfb, 0xfb, 0xd7, 0xff},
	color.RGBA{0xdf, 0xdf, 0xb7, 0xff},
	color.RGBA{0xc3, 0xc3, 0x9b, 0xff},
	color.RGBA{0xab, 0xab, 0x83, 0xff},
	color.RGBA{0x93, 0x93, 0x6f, 0xff},
	color.RGBA{0x77, 0x77, 0x57, 0xff},
	color.RGBA{0x63, 0x63, 0x43, 0xff},
	color.RGBA{0x53, 0x53, 0x33, 0xff},
	color.RGBA{0x43, 0x43, 0x23, 0xff},
	color.RGBA{0x33, 0x33, 0x17, 0xff},
	color.RGBA{0x23, 0x23, 0x0f, 0xff},
	color.RGBA{0x1b, 0x1b, 0x07, 0xff},
	color.RGBA{0x17, 0x17, 0x07, 0xff},
	color.RGBA{0x13, 0x13, 0x00, 0xff},
	color.RGBA{0x0f, 0x0f, 0x00, 0xff},
	color.RGBA{0x0b, 0x0b, 0x00, 0xff},
	color.RGBA{0xfb, 0xfb, 0xfb, 0xff},
	color.RGBA{0xeb, 0xeb, 0xeb, 0xff},
	color.RGBA{0xdb, 0xdb, 0xdb, 0xff},
	color.RGBA{0xcb, 0xcb, 0xcb, 0xff},
	color.RGBA{0xbb, 0xbb, 0xbb, 0xff},
	color.RGBA{0xab, 0xab, 0xab, 0xff},
	color.RGBA{0x9b, 0x9b, 0x9b, 0xff},
	color.RGBA{0x8b, 0x8b, 0x8b, 0xff},
	color.RGBA{0x7b, 0x7b, 0x7b, 0xff},
	color.RGBA{0x6b, 0x6b, 0x6b, 0xff},
	color.RGBA{0x5b, 0x5b, 0x5b, 0xff},
	color.RGBA{0x4b, 0x4b, 0x4b, 0xff},
	color.RGBA{0x3b, 0x3b, 0x3b, 0xff},
	color.RGBA{0x2b, 0x2b, 0x2b, 0xff},
	color.RGBA{0x1f, 0x1f, 0x1f, 0xff},
	color.RGBA{0x0f, 0x0f, 0x0f, 0xff},
	color.RGBA{0xeb, 0xf3, 0xff, 0xff},
	color.RGBA{0xcb, 0xe3, 0xff, 0xff},
	color.RGBA{0xaf, 0xcf, 0xff, 0xff},
	color.RGBA{0x97, 0xb3, 0xff, 0xff},
	color.RGBA{0x7b, 0x97, 0xff, 0xff},
	color.RGBA{0x67, 0x7f, 0xff, 0xff},
	color.RGBA{0x53, 0x6b, 0xef, 0xff},
	color.RGBA{0x3f, 0x5b, 0xe3, 0xff},
	color.RGBA{0x33, 0x4b, 0xd7, 0xff},
	color.RGBA{0x23, 0x3b, 0xcb, 0xff},
	color.RGBA{0x17, 0x2f, 0xaf, 0xff},
	color.RGBA{0x0f, 0x27, 0x97, 0xff},
	color.RGBA{0x07, 0x1f, 0x7b, 0xff},
	color.RGBA{0x07, 0x17, 0x63, 0xff},
	color.RGBA{0x00, 0x0f, 0x47, 0xff},
	color.RGBA{0x00, 0x0b, 0x2f, 0xff},
	color.RGBA{0xe3, 0xf7, 0xff, 0xff},
	color.RGBA{0xbf, 0xdb, 0xe7, 0xff},
	color.RGBA{0x9f, 0xbf, 0xcf, 0xff},
	color.RGBA{0x83, 0xa7, 0xb7, 0xff},
	color.RGBA{0x6b, 0x8f, 0xa3, 0xff},
	color.RGBA{0x53, 0x77, 0x8b, 0xff},
	color.RGBA{0x3f, 0x5f, 0x73, 0xff},
	color.RGBA{0x2f, 0x4b, 0x5f, 0xff},
	color.RGBA{0x27, 0x3f, 0x57, 0xff},
	color.RGBA{0x23, 0x37, 0x4f, 0xff},
	color.RGBA{0x1f, 0x2f, 0x47, 0xff},
	color.RGBA{0x1b, 0x27, 0x3f, 0xff},
	color.RGBA{0x17, 0x1f, 0x37, 0xff},
	color.RGBA{0x13, 0x1b, 0x2f, 0xff},
	color.RGBA{0x0f, 0x13, 0x27, 0xff},
	color.RGBA{0x0b, 0x0f, 0x1f, 0xff},
	color.RGBA{0xd7, 0xef, 0xff, 0xff},
	color.RGBA{0xbb, 0xe3, 0xef, 0xff},
	color.RGBA{0x9b, 0xcb, 0xdf, 0xff},
	color.RGBA{0x83, 0xb7, 0xcf, 0xff},
	color.RGBA{0x6b, 0xa3, 0xc3, 0xff},
	color.RGBA{0x53, 0x8f, 0xb3, 0xff},
	color.RGBA{0x3f, 0x7b, 0xa3, 0xff},
	color.RGBA{0x2f, 0x6b, 0x97, 0xff},
	color.RGBA{0x23, 0x5b, 0x87, 0xff},
	color.RGBA{0x1b, 0x4b, 0x77, 0xff},
	color.RGBA{0x13, 0x3f, 0x67, 0xff},
	color.RGBA{0x0b, 0x33, 0x57, 0xff},
	color.RGBA{0x07, 0x27, 0x47, 0xff},
	color.RGBA{0x00, 0x1b, 0x37, 0xff},
	color.RGBA{0x00, 0x13, 0x27, 0xff},
	color.RGBA{0x00, 0x0b, 0x1b, 0xff},
	color.RGBA{0xff, 0xe7, 0xff, 0xff},
	color.RGBA{0xe7, 0xc7, 0xeb, 0xff},
	color.RGBA{0xd3, 0xab, 0xd7, 0xff},
	color.RGBA{0xbb, 0x93, 0xc3, 0xff},
	color.RGBA{0xa7, 0x7b, 0xb3, 0xff},
	color.RGBA{0x8f, 0x63, 0x9f, 0xff},
	color.RGBA{0x77, 0x4b, 0x8f, 0xff},
	color.RGBA{0x63, 0x3b, 0x7f, 0xff},
	color.RGBA{0x4f, 0x2b, 0x6f, 0xff},
	color.RGBA{0x43, 0x1f, 0x63, 0xff},
	color.RGBA{0x37, 0x17, 0x57, 0xff},
	color.RGBA{0x2b, 0x0f, 0x47, 0xff},
	color.RGBA{0x1f, 0x07, 0x3b, 0xff},
	color.RGBA{0x13, 0x00, 0x2b, 0xff},
	color.RGBA{0x0b, 0x00, 0x1f, 0xff},
	color.RGBA{0x07, 0x00, 0x13, 0xff},
	color.RGBA{0xd7, 0xff, 0xa7, 0xff},
	color.RGBA{0xab, 0xe7, 0x7f, 0xff},
	color.RGBA{0x83, 0xd3, 0x5b, 0xff},
	color.RGBA{0x67, 0xbf, 0x3f, 0xff},
	color.RGBA{0x4b, 0xab, 0x2b, 0xff},
	color.RGBA{0x43, 0x97, 0x2b, 0xff},
	color.RGBA{0x37, 0x87, 0x27, 0xff},
	color.RGBA{0x2f, 0x77, 0x1b, 0xff},
	color.RGBA{0x2b, 0x67, 0x13, 0xff},
	color.RGBA{0x23, 0x5b, 0x0f, 0xff},
	color.RGBA{0x1f, 0x4f, 0x0b, 0xff},
	color.RGBA{0x1b, 0x43, 0x07, 0xff},
	color.RGBA{0x17, 0x33, 0x00, 0xff},
	color.RGBA{0x0f, 0x27, 0x00, 0xff},
	color.RGBA{0x0b, 0x1b, 0x00, 0xff},
	color.RGBA{0x07, 0x0f, 0x00, 0xff},
	color.RGBA{0xff, 0xe3, 0x9f, 0xff},
	color.RGBA{0xe3, 0xc7, 0x73, 0xff},
	color.RGBA{0xcb, 0xaf, 0x53, 0xff},
	color.RGBA{0xb3, 0x97, 0x3f, 0xff},
	color.RGBA{0x9b, 0x83, 0x2f, 0xff},
	color.RGBA{0x83, 0x6f, 0x23, 0xff},
	color.RGBA{0x6b, 0x5b, 0x17, 0xff},
	color.RGBA{0x53, 0x47, 0x0f, 0xff},
	color.RGBA{0x4b, 0x3b, 0x0b, 0xff},
	color.RGBA{0x43, 0x33, 0x07, 0xff},
	color.RGBA{0x3b, 0x2b, 0x07, 0xff},
	color.RGBA{0x37, 0x23, 0x00, 0xff},
	color.RGBA{0x2f, 0x1b, 0x00, 0xff},
	color.RGBA{0x27, 0x13, 0x00, 0xff},
	color.RGBA{0x1f, 0x0f, 0x00, 0xff},
	color.RGBA{0x1b, 0x0b, 0x00, 0xff},
	color.RGBA{0xff, 0xff, 0xa3, 0xff},
	color.RGBA{0xfb, 0xf3, 0x83, 0xff},
	color.RGBA{0xf7, 0xe3, 0x67, 0xff},
	color.RGBA{0xf3, 0xd3, 0x4f, 0xff},
	color.RGBA{0xef, 0xbb, 0x33, 0xff},
	color.RGBA{0xef, 0xa7, 0x1b, 0xff},
	color.RGBA{0xeb, 0x8f, 0x13, 0xff},
	color.RGBA{0xe7, 0x7b, 0x0f, 0xff},
	color.RGBA{0xdf, 0x4f, 0x07, 0xff},
	color.RGBA{0xd7, 0x23, 0x00, 0xff},
	color.RGBA{0xbf, 0x1f, 0x00, 0xff},
	color.RGBA{0xa7, 0x1b, 0x00, 0xff},
	color.RGBA{0x93, 0x17, 0x00, 0xff},
	color.RGBA{0x7b, 0x13, 0x00, 0xff},
	color.RGBA{0x63, 0x13, 0x00, 0xff},
	color.RGBA{0x4f, 0x0f, 0x00, 0xff},
	color.RGBA{0xff, 0xff, 0x00, 0xff},
	color.RGBA{0xff, 0xbf, 0x00, 0xff},
	color.RGBA{0xff, 0x83, 0x00, 0xff},
	color.RGBA{0xff, 0x47, 0x00, 0xff},
	color.RGBA{0xd3, 0x2b, 0x00, 0xff},
	color.RGBA{0xab, 0x17, 0x00, 0xff},
	color.RGBA{0x7f, 0x07, 0x00, 0xff},
	color.RGBA{0x57, 0x00, 0x00, 0xff},
	color.RGBA{0xdf, 0xcb, 0xff, 0xff},
	color.RGBA{0xbb, 0x9f, 0xdf, 0xff},
	color.RGBA{0x9b, 0x77, 0xbf, 0xff},
	color.RGBA{0x7f, 0x57, 0x9f, 0xff},
	color.RGBA{0x67, 0x3b, 0x7f, 0xff},
	color.RGBA{0x4b, 0x23, 0x5f, 0xff},
	color.RGBA{0x33, 0x13, 0x3f, 0xff},
	color.RGBA{0x1b, 0x07, 0x1f, 0xff},
	color.RGBA{0xd3, 0xdb, 0xff, 0xff},
	color.RGBA{0x87, 0x9f, 0xf7, 0xff},
	color.RGBA{0x43, 0x6f, 0xef, 0xff},
	color.RGBA{0x17, 0x47, 0xe7, 0xff},
	color.RGBA{0x0b, 0x2b, 0xbb, 0xff},
	color.RGBA{0x07, 0x17, 0x8f, 0xff},
	color.RGBA{0x00, 0x07, 0x63, 0xff},
	color.RGBA{0x00, 0x00, 0x37, 0xff},
	color.RGBA{0x7b, 0xff, 0x77, 0xff},
	color.RGBA{0x53, 0xdf, 0x4f, 0xff},
	color.RGBA{0x33, 0xbf, 0x2b, 0xff},
	color.RGBA{0x1b, 0x9f, 0x13, 0xff},
	color.RGBA{0x1b, 0x7f, 0x0b, 0xff},
	color.RGBA{0x17, 0x5f, 0x07, 0xff},
	color.RGBA{0x13, 0x3f, 0x00, 0xff},
	color.RGBA{0x0b, 0x1f, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0x00, 0x00, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xff, 0x00, 0x00, 0xff},
	color.RGBA{0x00, 0xff, 0x00, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0x00, 0x00, 0xff, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
	color.RGBA{0xff, 0xff, 0xff, 0xff},
}
